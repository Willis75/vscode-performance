# Script para Configurar Limpieza Autom√°tica de VS Code
# Ejecutar SOLO UNA VEZ como Administrador

Write-Host "üîß Configurando limpieza autom√°tica de VS Code..." -ForegroundColor Cyan

# Rutas importantes
$scriptPath = "C:\Users\wumni\vscode_config\auto-cleanup-startup.ps1"
$taskName = "VSCode-AutoCleanup"

# Verificar que el script existe
if (-not (Test-Path $scriptPath)) {
    Write-Host "‚ùå Error: No se encuentra el script en $scriptPath" -ForegroundColor Red
    exit 1
}

try {
    # === OPCI√ìN 1: TAREA PROGRAMADA (RECOMENDADO) ===
    Write-Host "`nüìÖ Creando tarea programada..." -ForegroundColor Yellow
    
    # Eliminar tarea si ya existe
    Unregister-ScheduledTask -TaskName $taskName -Confirm:$false -ErrorAction SilentlyContinue
    
    # Crear acci√≥n
    $action = New-ScheduledTaskAction -Execute "PowerShell.exe" -Argument "-WindowStyle Hidden -ExecutionPolicy Bypass -File `"$scriptPath`" -Silent"
    
    # Crear trigger (al iniciar sesi√≥n + cada 6 horas)
    $triggerStartup = New-ScheduledTaskTrigger -AtLogOn
    $triggerRepeat = New-ScheduledTaskTrigger -Once -At (Get-Date) -RepetitionInterval (New-TimeSpan -Hours 6)
    
    # Crear configuraci√≥n
    $settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable
    
    # Registrar tarea
    Register-ScheduledTask -TaskName $taskName -Action $action -Trigger $triggerStartup, $triggerRepeat -Settings $settings -Description "Limpieza autom√°tica de VS Code para optimizar rendimiento"
    
    Write-Host "‚úÖ Tarea programada '$taskName' creada exitosamente" -ForegroundColor Green
    Write-Host "   üìã Se ejecutar√°: Al iniciar sesi√≥n + cada 6 horas" -ForegroundColor Gray
    
    # === OPCI√ìN 2: REGISTRO DE WINDOWS (ALTERNATIVA) ===
    Write-Host "`nüîë Configurando entrada en el Registro..." -ForegroundColor Yellow
    
    $registryPath = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Run"
    $registryName = "VSCodeOptimizer"
    $registryValue = "PowerShell.exe -WindowStyle Hidden -ExecutionPolicy Bypass -File `"$scriptPath`" -Silent"
    
    Set-ItemProperty -Path $registryPath -Name $registryName -Value $registryValue -ErrorAction SilentlyContinue
    Write-Host "‚úÖ Entrada en registro creada" -ForegroundColor Green
    
    # === OPCI√ìN 3: CARPETA INICIO (SIMPLE) ===
    Write-Host "`nüìÇ Creando acceso directo en Inicio..." -ForegroundColor Yellow
    
    $startupFolder = "$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup"
    $shortcutPath = "$startupFolder\VSCode Optimizer.lnk"
    
    $shell = New-Object -ComObject WScript.Shell
    $shortcut = $shell.CreateShortcut($shortcutPath)
    $shortcut.TargetPath = "PowerShell.exe"
    $shortcut.Arguments = "-WindowStyle Hidden -ExecutionPolicy Bypass -File `"$scriptPath`" -Silent"
    $shortcut.Description = "Optimizador autom√°tico de VS Code"
    $shortcut.WindowStyle = 7  # Minimized
    $shortcut.Save()
    
    Write-Host "‚úÖ Acceso directo creado en carpeta Inicio" -ForegroundColor Green
    
    # Mostrar resumen
    Write-Host "`nüéâ ¬°Configuraci√≥n autom√°tica completada!" -ForegroundColor Green
    Write-Host "`nüìã M√©todos configurados:" -ForegroundColor Cyan
    Write-Host "   1. ‚úÖ Tarea Programada (recomendado)" -ForegroundColor White
    Write-Host "   2. ‚úÖ Registro de Windows" -ForegroundColor White  
    Write-Host "   3. ‚úÖ Carpeta de Inicio" -ForegroundColor White
    
    Write-Host "`n‚è∞ Frecuencia de ejecuci√≥n:" -ForegroundColor Cyan
    Write-Host "   ‚Ä¢ Al iniciar sesi√≥n de usuario" -ForegroundColor White
    Write-Host "   ‚Ä¢ Cada 6 horas (solo tarea programada)" -ForegroundColor White
    
    Write-Host "`nüîß Para gestionar:" -ForegroundColor Cyan
    Write-Host "   ‚Ä¢ Tareas: Abrir 'Programador de tareas' ‚Üí '$taskName'" -ForegroundColor White
    Write-Host "   ‚Ä¢ Registro: Ejecutar 'msconfig' ‚Üí Pesta√±a 'Inicio'" -ForegroundColor White
    Write-Host "   ‚Ä¢ Carpeta: $startupFolder" -ForegroundColor White
    
} catch {
    Write-Host "‚ùå Error durante la configuraci√≥n: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host "üí° Aseg√∫rate de ejecutar como Administrador" -ForegroundColor Yellow
}

Write-Host "`nüîÑ Presiona Enter para continuar..." -ForegroundColor Gray
Read-Host
